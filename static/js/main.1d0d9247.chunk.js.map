{"version":3,"sources":["Cards.js","App.js","serviceWorker.js","index.js"],"names":["Cards","action","reversed","social","Card","props","className","card","reverseCard","random_boolean","Math","random","shuffle","array","temporaryValue","randomIndex","currentIndex","length","floor","App","cards","useState","num","setNum","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1d0d9247.chunk.js","sourcesContent":["export const Cards = () => [\r\n    { \r\n        action : \"Change\",\r\n        reversed: {\r\n          action: \"Stasis\"\r\n        }\r\n    },\r\n    { \r\n        action : \"Recognising the Larger Problem\",\r\n        reversed: {\r\n          action: \"Underestimating the Challenge\"\r\n        }\r\n    },\r\n    { \r\n        action : \"Understanding Mysteries\",\r\n        reversed: {\r\n          action: \"Impracticality\"\r\n        }\r\n    },\r\n    { \r\n        action : \"Energy\",\r\n        reversed: {\r\n          action: \"Exhaustion\"\r\n        }\r\n    },\r\n    { \r\n        action : \"Bravery\",\r\n        reversed: {\r\n          action: \"Cowardice\"\r\n        }\r\n    },\r\n    { \r\n        action : \"Simplicity Prevails\",\r\n        reversed: {\r\n          action: \"Creativity Shines\"\r\n        }\r\n    },\r\n    { \r\n        action : \"Great Effort\",\r\n        reversed: {\r\n          action: \"Effort Misspent\"\r\n        }\r\n    },\r\n    { \r\n        action : \"Recognising Opportunity\",\r\n        reversed: {\r\n          action: \"Failing to see Opportunity\"\r\n        }\r\n    },\r\n    { \r\n        action : \"Unforseen Circumstances\",\r\n        reversed: {\r\n          action: \"Stroke of Luck\"\r\n        }\r\n    },\r\n    { \r\n        action : \"Thoughtlessness\",\r\n        reversed: {\r\n          action: \"Achieving the Unexpected\"\r\n        }\r\n    },\r\n    { \r\n        action : \"Ceasing Fruitless Labor\",\r\n        reversed: {\r\n          action: \"Fruitless Labor\"\r\n        }\r\n    },\r\n    { \r\n        action : \"Innovation\",\r\n        reversed: {\r\n          action: \"Arrogance\"\r\n        }\r\n    },\r\n    { \r\n        action : \"Recognising Limits & Dangers\",\r\n        reversed: {\r\n          action: \"Protections Turn Dangerous\"\r\n        }\r\n    },\r\n    { \r\n        action : \"Hope in Bleaknesss\",\r\n        reversed: {\r\n          action: \"Smart Idea turn Foolish\"\r\n        }\r\n    },\r\n    { \r\n        action : \"Productivity\",\r\n        reversed: {\r\n          action: \"Overconfidence\"\r\n        }\r\n    },\r\n    { \r\n        action : \"Moderation\",\r\n        reversed: {\r\n          action: \"Blind Fury\"\r\n        }\r\n    },\r\n    { \r\n        action : \"Cunning\",\r\n        reversed: {\r\n          action: \"Overreaching\"\r\n        }\r\n    },\r\n    { \r\n        action : \"Using the Environment\",\r\n        social : \"Duty, Obidence\",\r\n        reversed: {\r\n          action: \"Environmental Hazard\",\r\n          social : \"Corruption\",\r\n        }\r\n    },\r\n    { \r\n        action : \"Devastation\",\r\n        social : \"Maturity\",\r\n        reversed: {\r\n          action: \"Outmanouvered\",\r\n          social : \"Tyranny\",\r\n        }\r\n    },\r\n]\r\n\r\nexport default Cards;","import React, { useState }  from 'react';\nimport './App.css';\nimport Cards from './Cards.js'\n\nfunction App() {\n  let cards = Cards();\n  cards = shuffle(cards);\n  const [num, setNum] = useState(cards.length - 1);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Card card={random_boolean() ? cards[num] : reverseCard(cards[num])}></Card>\n        {\n          num > 2 \n          ? <button onClick={() => {setNum(num-1)}}>Next Card</button>\n          : <button onClick={() => {cards = shuffle(cards); setNum(cards.length-1)}}>Shuffle</button>\n        }\n      </header>\n    </div>\n  );\n}\n\nfunction Card(props) {\n  return (\n  <div className=\"card-border\">\n    <div className=\"card-inner\">\n      <div className=\"text-box backwards\">{props.card.reversed.action}</div>\n      <div className={props.card.reversed.social != null ? \"social-box backwards\" : \"text-box backwards\"}>{props.card.reversed.social}</div>\n      <div className =\"art-box\"/>\n      <div className={props.card.reversed.social != null ? \"social-box backwards\" : \"text-box backwards\"}>{props.card.social}</div>\n      <div className=\"text-box\">{props.card.action}</div>\n    </div>\n  </div>);\n}\n\nconst reverseCard = (card) => {\n  return {\n    action: card.reversed.action,\n    social: card.reversed.social,\n    reversed: {\n      action: card.action,\n      social: card.social\n    }\n  }\n}\n\nconst random_boolean = () => Math.random() >= 0.5;\n\nfunction shuffle(array) {\n  var currentIndex = array.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}